{"version":3,"file":"ol-wind.cjs.js","sources":["../src/renderer.ts","../src/index.ts"],"sourcesContent":["import type { FrameState } from 'ol/PluggableMap';\nimport type { Coordinate } from 'ol/coordinate';\nimport type { Pixel } from 'ol/pixel';\nimport { fromUserExtent, fromUserCoordinate, toUserCoordinate, transform as transformProj } from 'ol/proj';\nimport CanvasLayerRenderer from 'ol/renderer/canvas/Layer';\nimport {\n  toString as toTransformString,\n  compose,\n  makeInverse,\n  apply as applyTransform,\n  create as createTransform,\n  type Transform,\n} from 'ol/transform';\nimport { containsExtent, intersects, containsCoordinate, getIntersection, isEmpty } from 'ol/extent';\nimport type { Extent } from 'ol/extent';\n\nimport { WindCore } from 'wind-core';\nimport type { IOptions, Field } from 'wind-core';\n\nimport type { WindLayer } from './index';\n\nconst ViewHint = {\n  ANIMATING: 0,\n  INTERACTING: 1,\n};\n\nexport default class WindLayerRender extends CanvasLayerRenderer<any> {\n  protected container: HTMLElement;\n  protected inversePixelTransform: Transform;\n  protected pixelTransform: Transform;\n\n  public wind: WindCore;\n\n  constructor(layer) {\n    super(layer);\n\n    this.pixelTransform = createTransform();\n    this.inversePixelTransform = createTransform();\n  }\n\n  // useContainer(target: HTMLElement, transform: string, backgroundColor: number) 这里在 v6.3.0 后有 break change\n  useContainer(target: HTMLElement, transform: string, backgroundColor?: string) {\n    // 此处强制新建 canvas\n    super.useContainer(null as any, transform, backgroundColor);\n  }\n\n  getBackground(frameState: FrameState) {\n    // @ts-ignore 6.3.0 之前无此函数\n    if (super.getBackground) {\n      return super.getBackground(frameState)\n    }\n\n    return ''\n  }\n\n  prepareFrame(frameState: FrameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent as Extent,\n        fromUserExtent(layerState.extent, viewState.projection),\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !frameState.animate &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent as Extent)\n    ) {\n      if (this.wind?.isStop?.()) {\n        this.wind.start();\n      }\n      return true;\n    } else {\n      const layer = this.getLayer() as unknown as WindLayer;\n      return layer.get('forceRender');\n    }\n  }\n\n  prepareContainer(frameState: FrameState, target: HTMLElement) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n    const width = Math.round(size[0] * pixelRatio);\n    const height = Math.round(size[1] * pixelRatio);\n    // set forward and inverse pixel transforms\n    compose(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2,\n    );\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    if (!this.containerReused) {\n      const canvas = this.context.canvas;\n      if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        // this.getRenderContext(frameState).globalCompositeOperation = 'source-over';\n      }\n      if (canvasTransform !== canvas.style.transform) {\n        canvas.style.transform = canvasTransform;\n      }\n    }\n  }\n\n  getRenderContext(frameState: FrameState) {\n    return this.context;\n  }\n\n  renderFrame(frameState: FrameState, target: HTMLElement) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n\n    this.prepareContainer(frameState, target);\n\n    const context = this.getRenderContext(frameState);\n\n    context.imageSmoothingEnabled = false;\n    this.preRender(context, frameState);\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(layerState.extent, viewState.projection);\n      render = intersects(layerExtent, frameState.extent as Extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent as Extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const layer = this.getLayer();\n    const opt = layer.getWindOptions();\n    const data = layer.getData();\n\n    this.execute(this.context, frameState, opt, data);\n\n    this.postRender(this.context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n\n    context.imageSmoothingEnabled = true;\n\n    return this.container;\n  }\n\n  public setOptions(options: Partial<IOptions>) {\n    if (this.wind) {\n      this.wind.setOptions(options);\n      // wind.prerender();\n    }\n  }\n\n  public setData(field: Field) {\n    if (this.wind) {\n      this.wind.updateData(field);\n    }\n  }\n\n  execute(\n    context: CanvasRenderingContext2D,\n    frameState: FrameState,\n    opt: Partial<IOptions>,\n    data: any,\n  ) {\n    if (!this.wind) {\n      this.wind = new WindCore(context, opt, data);\n\n      this.wind.project = this.getPixelFromCoordinateInternal.bind(this);\n      this.wind.unproject = this.getCoordinateFromPixel.bind(this);\n      this.wind.intersectsCoordinate = this.intersectsCoordinate.bind(this);\n      this.wind.postrender = () => {\n        //\n      };\n      this.wind.prerender();\n    }\n  }\n\n  private getPixelFromCoordinateInternal(coordinate: Coordinate): [number, number] | null {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    } else {\n      const viewState = frameState.viewState;\n      const pixelRatio = frameState.pixelRatio;\n      const point = transformProj(coordinate, 'EPSG:4326', viewState.projection);\n      const viewCoordinate = fromUserCoordinate(point, viewState.projection);\n      const pixel = applyTransform(frameState.coordinateToPixelTransform, viewCoordinate.slice(0, 2));\n      return [pixel[0] * pixelRatio, pixel[1] * pixelRatio];\n    }\n  }\n\n  private getCoordinateFromPixel(pixel: Pixel): [number, number] | null {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    } else {\n      const viewState = frameState.viewState;\n      const viewCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice(0, 2));\n      const coordinate = toUserCoordinate(viewCoordinate, viewState.projection);\n      const point = transformProj(coordinate, viewState.projection, 'EPSG:4326');\n      return [point[0], point[1]];\n    }\n  }\n\n  private intersectsCoordinate(coordinate: Coordinate): boolean {\n    const frameState = this.frameState;\n    if (frameState) {\n      const viewState = frameState.viewState;\n      const point = transformProj(coordinate, 'EPSG:4326', viewState.projection);\n      const viewCoordinate = fromUserCoordinate(point, viewState.projection);\n      // const extent = getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, frameState.size.map((item) => item * frameState.pixelRatio));\n      return containsCoordinate(frameState.extent as Extent, viewCoordinate.slice(0, 2));\n    }\n\n    return true;\n  }\n}\n","import { Layer } from 'ol/layer';\nimport type { PluggableMap} from 'ol';\nimport type { FrameState } from 'ol/PluggableMap';\nimport WindLayerRender from './renderer';\n\nimport { isArray, formatData, assign, defaultOptions } from 'wind-core';\n\nimport type { IOptions, IField, Field } from 'wind-core';\n\nconst _options = {\n  forceRender: true,\n  windOptions: {},\n};\n\nexport { Field } from 'wind-core';\n\nexport interface IWindOptions extends IOptions {\n  /**\n   * 配置是否强制渲染；ol 对图层有一定的优化策略，在地图拖动，缩放等交互会隐藏图层，如果我们期望在拖动缩放\n   * 也需要保持图层显示，那么可以开启器配置（默认开启）\n   */\n  forceRender: boolean;\n\n  /**\n   * 风场渲染相关配置\n   */\n  windOptions: Partial<IOptions>;\n\n  /**\n   * 风场数据相关配置\n   */\n  fieldOptions: Partial<IField>;\n  [key: string]: any;\n}\n\nexport class WindLayer extends Layer {\n  private field: Field | undefined;\n  private options: IWindOptions;\n\n  constructor(data: any, options: any) {\n    const opt = assign({}, _options, options);\n\n    super(opt);\n\n    this.options = opt;\n\n    // @ts-ignore @tip overwrite for layer className and disable containerReused\n    this.className_ = options.className !== undefined ? options.className : 'wind-layer';\n\n    this.pickWindOptions();\n\n    if (data) {\n      this.setData(data, options.fieldOptions);\n    }\n  }\n\n  /**\n   * 兼容旧版调用方式，现在可以使用以下方式添加图层：\n   * ```ts\n   * 1. 常规方式\n   * map.addLayer(windLayer);\n   *\n   * 2. setMap 会脱离 ol 地图的图层管理\n   *\n   * layer.setMap(map);\n   *\n   * 3. 调用 appendTo\n   *\n   * layer.appendTo(map);\n   * ```\n   * @param map\n   */\n  public appendTo(map: any) {\n    map.addLayer(this);\n  }\n\n  private onAdd() {\n    const renderer = this.getRenderer();\n    if (renderer) {\n      renderer.wind?.start();\n    }\n  }\n\n  private onRemove() {\n    const renderer = this.getRenderer();\n    if (renderer) {\n      renderer.wind.stop();\n    }\n  }\n\n  protected createRenderer(): any {\n    // @ts-ignore need resolve\n    return new WindLayerRender(this);\n  }\n\n  protected getRenderer() {\n    return super.getRenderer() as WindLayerRender;\n  }\n\n  private pickWindOptions() {\n    Object.keys(defaultOptions).forEach((key: string) => {\n      if (key in this.options) {\n        if (this.options.windOptions === undefined) {\n          this.options.windOptions = {};\n        }\n        this.options.windOptions[key] = this.options[key];\n      }\n    });\n  }\n\n  /**\n   * 获取图层现有数据\n   * get wind layer data\n   */\n  // @ts-ignore overwrite base layer\n  public getData() {\n    return this.field;\n  }\n\n  /**\n   * 设置图层数据\n   * set layer data\n   * @param data\n   * @param options\n   * @returns {WindLayer}\n   */\n  public setData(data: any, options: Partial<IField> = {}) {\n    if (data && data.checkFields && data.checkFields()) {\n      this.field = data;\n    } else if (isArray(data)) {\n      this.field = formatData(data, options);\n    } else {\n      console.error('Illegal data');\n    }\n\n    const renderer = this.getRenderer();\n    if (renderer && this.field) {\n      renderer.setData(this.field);\n    }\n\n    this.changed();\n\n    return this;\n  }\n\n  /**\n   * 设置风场图层的配置项\n   * @param options\n   */\n  public setWindOptions(options: Partial<IOptions>) {\n    const beforeOptions = this.options.windOptions || {};\n    this.options = assign(this.options, {\n      windOptions: assign(beforeOptions, options || {}),\n    });\n\n    const renderer = this.getRenderer();\n    if (renderer) {\n      const windOptions = this.options.windOptions;\n      renderer.setOptions(windOptions);\n    }\n\n    this.changed();\n  }\n\n  /**\n   * 获取风场图层渲染的配置项\n   */\n  public getWindOptions() {\n    return this.options.windOptions || {};\n  }\n\n  render(frameState: FrameState, target: HTMLElement): any {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer && layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n    return null;\n  }\n\n  // since v6\n  setMapInternal(map: PluggableMap) {\n    super.setMapInternal(map);\n\n    if (!map) {\n      this.onRemove();\n    } else {\n      this.onAdd()\n    }\n  }\n\n  /**\n   * 支持以 setMap 方式添加图层\n   * @param map\n   */\n  public setMap(map: PluggableMap) {\n    super.setMap(map);\n    if (!map) {\n      this.onRemove();\n    } else {\n      this.onAdd()\n    }\n  }\n}\n"],"names":["createTransform","getIntersection","fromUserExtent","isEmpty","compose","makeInverse","toTransformString","intersects","containsExtent","WindCore","transformProj","fromUserCoordinate","applyTransform","toUserCoordinate","containsCoordinate","Layer","assign","defaultOptions","isArray","formatData"],"mappings":"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"}
{"version":3,"file":"wind-core.esm.js","sources":["../src/utils.ts","../src/Vector.ts","../src/Field.ts","../src/index.ts"],"sourcesContent":["import Field from './Field';\nimport type { IField } from './Field';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst symToStringTag = typeof Symbol !== 'undefined' ? Symbol.toStringTag : undefined;\n\nfunction baseGetTag(value: any) {\n  if (value === null) {\n    return value === undefined ? '[object Undefined]' : '[object Null]';\n  }\n  if (!(symToStringTag && symToStringTag in Object(value))) {\n    return toString.call(value);\n  }\n  const isOwn = hasOwnProperty.call(value, symToStringTag);\n  const tag = value[symToStringTag];\n  let unmasked = false;\n  try {\n    value[symToStringTag] = undefined;\n    unmasked = true;\n  } catch (e) {\n    //\n  }\n\n  const result = Object.prototype.toString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport function TypeOf(value: any) {\n  return Object.prototype.toString.call(value).slice(8, -1).toLowerCase();\n}\n\n/**\n * 判断是否为函数\n * @param value\n * @returns {boolean}\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (!isObject(value)) {\n    return false;\n  }\n  const tag = baseGetTag(value);\n  return (\n    tag === '[object Function]' ||\n    tag === '[object AsyncFunction]' ||\n    tag === '[object GeneratorFunction]' ||\n    tag === '[object Proxy]'\n  );\n}\n\n/**\n * 判断是否为对象\n * @param value\n * @returns {boolean}\n */\nexport function isObject(value: any) {\n  const type = typeof value;\n  return value !== null && (type === 'object' || type === 'function');\n}\n\n/**\n * is date value\n * @param val\n * @returns {boolean}\n */\nexport function isDate(val: any) {\n  return Object.prototype.toString.call(val) === '[object Date]';\n}\n\n/**\n * is array buffer\n * @param val\n * @returns {boolean}\n */\nexport function isArrayBuffer(val: any) {\n  return Object.prototype.toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * 判断是否为合法字符串\n * @param value\n * @returns {boolean}\n */\nexport function isString(value: any): boolean {\n  if (value == null) {\n    return false;\n  }\n  return typeof value === 'string' || (value.constructor !== null && value.constructor === String);\n}\n\n/**\n * 判断是否为数字\n * @param value\n * @returns {boolean}\n */\nexport function isNumber(value: any) {\n  return Object.prototype.toString.call(value) === '[object Number]' && !isNaN(value);\n}\n\n/**\n * 判断对象是否为空\n * @param object\n * @returns {boolean}\n */\nexport function isEmpty(object: any) {\n  let property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n}\n\n/**\n * 判断是否为 `null`\n * @param obj\n * @returns {boolean}\n */\nexport function isNull(obj: any) {\n  return obj == null;\n}\n\n/**\n * 判断是否是数组\n * @param arr\n */\nexport function isArray(arr: any): boolean {\n  return Array.isArray(arr);\n}\n\n/**\n * assign object\n * @param target\n * @param sources\n */\nexport function assign(target: object, ...sources: any[]) {\n  return Object.assign(target, ...sources);\n}\n\n/**\n * 打印⚠️信息\n * @param msg\n * @param n\n */\nexport function warnLog(msg: string, n?: string) {\n  console.warn(`${n || 'wind-layer'}: ${msg}`);\n}\n\nconst warnings = {};\n\n/**\n * 在程序运行时只打印同类型警告一次\n * @param namespaces\n * @param msg\n */\nexport function warnOnce(namespaces: string, msg: string) {\n  if (!warnings[msg]) {\n    warnLog(msg, namespaces);\n    warnings[msg] = true;\n  }\n}\n\n/**\n * Get floored division\n * @param a\n * @param n\n * @returns {Number} returns remainder of floored division,\n * i.e., floor(a / n). Useful for consistent modulo of negative numbers.\n * See http://en.wikipedia.org/wiki/Modulo_operation.\n */\nexport function floorMod(a: number, n: number) {\n  return a - n * Math.floor(a / n);\n}\n\n/**\n * 检查值是否合法\n * @param val\n * @returns {boolean}\n */\nexport function isValide(val: any) {\n  return val !== undefined && val !== null && !isNaN(val);\n}\n\nexport interface IGFSItem {\n  header: {\n    parameterCategory: number | string;\n    parameterNumber: number | string;\n    dx: number;\n    dy: number;\n    nx: number;\n    ny: number;\n    lo1: number;\n    lo2: number;\n    la1: number;\n    la2: number;\n    [key: string]: any;\n  };\n  data: number[];\n}\n\n/**\n * format gfs json to vector\n * @param data\n * @param options\n */\nexport function formatData(data: IGFSItem[], options: Partial<IField> = {}) {\n  let uComp: IGFSItem = undefined as unknown as IGFSItem;\n  let vComp: IGFSItem = undefined as unknown as IGFSItem;\n\n  if ((process.env.NODE_ENV as string) === ('development' as string)) {\n    console.time('format-data');\n  }\n\n  data.forEach(function (record: IGFSItem) {\n    switch (record.header.parameterCategory + ',' + record.header.parameterNumber) {\n      case '1,2':\n      case '2,2':\n        uComp = record;\n        break;\n      case '1,3':\n      case '2,3':\n        vComp = record;\n        break;\n    }\n  });\n\n  if (!vComp || !uComp) {\n    return undefined;\n  }\n\n  const header = uComp.header;\n  const vectorField = new Field({\n    xmin: header.lo1, // 一般格点数据是按照矩形范围来切割，所以定义其经纬度范围\n    ymin: header.la1,\n    xmax: header.lo2,\n    ymax: header.la2,\n    deltaX: header.dx, // x（经度）增量\n    deltaY: header.dy, // y（维度）增量\n    cols: header.nx, // 列（可由 `(xmax - xmin) / deltaX` 得到）\n    rows: header.ny, // 行\n    us: uComp.data, // U分量\n    vs: vComp.data, // V分量\n    ...options,\n  });\n\n  if ((process.env.NODE_ENV as string) === ('development' as string)) {\n    console.timeEnd('format-data');\n  }\n\n  return vectorField;\n}\n\n/**\n * create canvas\n * @param width\n * @param height\n * @param retina\n * @param Canvas\n * @returns {HTMLCanvasElement}\n */\nexport function createCanvas(width: number, height: number, retina: number, Canvas?: any): HTMLCanvasElement {\n  if (typeof document !== 'undefined') {\n    const canvas = document.createElement('canvas');\n    canvas.width = width * retina;\n    canvas.height = height * retina;\n    return canvas;\n  } else {\n    // create a new canvas instance in node.js\n    // the canvas class needs to have a default constructor without any parameter\n    return new Canvas(width * retina, height * retina);\n  }\n}\n\n/**\n * 移除 dom\n * @param node\n * @returns {removeDomNode}\n */\nexport function removeDomNode(node: HTMLElement | HTMLCanvasElement) {\n  if (!node) {\n    return null;\n  }\n  if (node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n  return node;\n}\n\nconst keyword = /(\\D+)/;\nconst hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n// eslint-disable-next-line no-useless-escape\nconst rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d.]+)\\s*)?\\)$/;\nconst colorNames: {\n  [key: string]: number[];\n} = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  grey: [128, 128, 128],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  rebeccapurple: [102, 51, 153],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50],\n};\n\nexport function getColor(string: string) {\n  let rgb: any[] = [];\n\n  if (string.match(hex)) {\n    let match = string.match(hex);\n\n    if (match !== null) {\n      // @ts-ignore\n      match = match[1];\n\n      for (let i = 0; i < 3; i++) {\n        // https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n        const i2 = i * 2;\n        // @ts-ignore\n        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n      }\n\n      rgb[3] = 1;\n    }\n  } else if (string.match(rgba)) {\n    const match = string.match(rgba);\n    for (let i = 0; i < 3; i++) {\n      // @ts-ignore\n      rgb[i] = parseInt(match[i + 1], 0);\n    }\n\n    // @ts-ignore\n    if (match[4]) {\n      // @ts-ignore\n      rgb[3] = parseFloat(match[4]);\n    } else {\n      rgb[3] = 1;\n    }\n  } else if (string.match(keyword)) {\n    const match = string.match(keyword);\n    // @ts-ignore\n    if (match[1] === 'transparent') {\n      return [0, 0, 0, 0];\n    }\n    // @ts-ignore\n    rgb = colorNames[match[1]];\n    if (!rgb) {\n      return null;\n    }\n    rgb[3] = 1;\n    return rgb;\n  } else {\n    return null;\n  }\n\n  return rgb;\n}\n\nexport function compareVersion(v1, v2) {\n  // eslint-disable-next-line no-param-reassign\n  v1 = v1.split('.');\n  // eslint-disable-next-line no-param-reassign\n  v2 = v2.split('.');\n  const len = Math.max(v1.length, v2.length);\n\n  while (v1.length < len) {\n    v1.push('0');\n  }\n  while (v2.length < len) {\n    v2.push('0');\n  }\n\n  for (let i = 0; i < len; i++) {\n    const num1 = parseInt(v1[i]);\n    const num2 = parseInt(v2[i]);\n\n    if (num1 > num2) {\n      return 1;\n    } else if (num1 < num2) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n","export default class Vector {\n  public u: number;\n  public v: number;\n  public m: number;\n\n  constructor(u: number, v: number) {\n    this.u = u;\n    this.v = v;\n\n    this.m = this.magnitude();\n  }\n\n  /**\n   * 向量值（这里指风速）\n   * @returns {Number}\n   */\n  public magnitude() {\n    return Math.sqrt(this.u ** 2 + this.v ** 2);\n  }\n\n  /**\n   * 流体方向 （这里指风向，范围为0-360º）\n   * N is 0º and E is 90º\n   * @returns {Number}\n   */\n  public directionTo() {\n    const verticalAngle = Math.atan2(this.u, this.v);\n    let inDegrees = verticalAngle * (180.0 / Math.PI);\n    if (inDegrees < 0) {\n      inDegrees += 360.0;\n    }\n    return inDegrees;\n  }\n\n  /**\n   * Angle in degrees (0 to 360º) From x-->\n   * N is 0º and E is 90º\n   * @returns {Number}\n   */\n  public directionFrom() {\n    const a = this.directionTo();\n    return (a + 180.0) % 360.0;\n  }\n}\n","import { floorMod, warnOnce } from './utils';\nimport Vector from './Vector';\n\nexport interface IField {\n  /* 一般格点数据是按照矩形范围来切割，所以定义其经纬度范围 */\n\n  /**\n   * 经度最小值\n   */\n  xmin: number;\n\n  /**\n   * 纬度最小值\n   */\n  ymin: number;\n\n  /**\n   * 经度最大值\n   */\n  xmax: number;\n\n  /**\n   * 纬度最大值\n   */\n  ymax: number;\n\n  /**\n   * x（经度）增量\n   */\n  deltaX: number;\n\n  /**\n   * y（纬度）增量 (默认我们采用的数据和格点原始数据方向保持一致，数据从左上到右下) 但是需要注意的是此时 deltaY为 -(ymax-ymin) / rows\n   */\n  deltaY: number;\n\n  /**\n   * 列（可由 `(xmax - xmin) / deltaX` 得到）\n   */\n  cols: number;\n\n  /**\n   * 行\n   */\n  rows: number;\n\n  /**\n   * U分量\n   */\n  us: number[];\n\n  /**\n   * V分量\n   */\n  vs: number[];\n\n  /**\n   * 因为grib2json的问题，我们需要翻转 Y 轴数据\n   */\n  flipY?: boolean;\n\n  /**\n   * 是否实现跨世界渲染\n   */\n  wrapX?: boolean;\n\n  /**\n   * 当数据范围时按照 [0, 360] 时需要对x方向进行切割转换为 [-180, 180]，即将废弃\n   */\n  wrappedX?: boolean;\n\n  /**\n   * 当数据范围时按照 [0, 360] 时需要对x方向进行切割转换为 [-180, 180]\n   */\n  translateX?: boolean;\n}\n\nexport interface IPosition {\n  age?: number;\n  x?: number;\n  y?: number;\n  xt?: number;\n  yt?: number;\n  m?: number;\n}\n\nexport default class Field {\n  private readonly xmin: number;\n  private readonly xmax: number;\n  private readonly ymin: number;\n  private readonly ymax: number;\n  private readonly cols: number;\n  private readonly rows: number;\n  private readonly us: number[];\n  private readonly vs: number[];\n  private readonly isContinuous: boolean;\n  private readonly deltaY: number;\n  private readonly deltaX: number;\n  private readonly translateX: undefined | boolean;\n  private readonly isFields: boolean;\n  private readonly flipY: boolean;\n  public grid: (Vector | null)[][];\n  public range: (number | undefined)[] | undefined;\n  private wrapX: boolean;\n\n  constructor(params: IField) {\n    this.grid = [];\n\n    this.xmin = params.xmin;\n    this.xmax = params.xmax;\n\n    this.ymin = params.ymin;\n    this.ymax = params.ymax;\n\n    this.cols = params.cols; // 列数\n    this.rows = params.rows; // 行数\n\n    this.us = params.us; //\n    this.vs = params.vs;\n\n    this.deltaX = params.deltaX; // x 方向增量\n    this.deltaY = params.deltaY; // y方向增量\n    this.flipY = Boolean(params.flipY);\n\n    // 由于数据组织方式和deltaY的默认处理，那么在正常情况下我们需要交换 ymin 和 ymax 得到数据真实的 bbox（todo：我们需要按照真实数据来组织吗？）\n    this.ymin = Math.min(params.ymax, params.ymin);\n    this.ymax = Math.max(params.ymax, params.ymin);\n\n    // 当 deltaY < 0 时，但是数据组织是由左上到右下此时说明数据 Y 轴是反的\n    if (!(this.deltaY < 0 && this.ymin < this.ymax)) {\n      if (params.flipY === undefined) {\n        this.flipY = true;\n      }\n      console.warn('[wind-core]: The data is flipY');\n    }\n\n    /**\n     *\n     */\n    this.isFields = true;\n\n    const cols = Math.ceil((this.xmax - this.xmin) / params.deltaX); // 列\n    const rows = Math.ceil((this.ymax - this.ymin) / params.deltaY); // 行\n\n    if (cols !== this.cols || rows !== this.rows) {\n      console.warn('[wind-core]: The data grid not equal');\n    }\n\n    // 部分数据可能并不是连续的，其经度范围可能是 -180 - 179.5（比如 GFS 0.5 分辨率的）我们需要补齐最后一位\n    this.isContinuous = Math.floor(this.cols * params.deltaX) >= 360;\n    this.translateX = 'translateX' in params ? params.translateX : this.xmax > 180; // [0, 360] --> [-180, 180];\n    if ('wrappedX' in params) {\n      warnOnce('[wind-core]: ', '`wrappedX` namespace will deprecated please use `translateX` instead！');\n    }\n\n    this.wrapX = Boolean(params.wrapX);\n\n    this.grid = this.buildGrid();\n    this.range = this.calculateRange();\n  }\n\n  // from https://github.com/sakitam-fdd/wind-layer/blob/95368f9433/src/windy/windy.js#L110\n  public buildGrid(): (Vector | null)[][] {\n    const grid: any[] = [];\n    let p = 0;\n\n    const { rows, cols, us, vs } = this;\n\n    for (let j = 0; j < rows; j++) {\n      const row: any[] = [];\n      for (let i = 0; i < cols; i++, p++) {\n        const u = us[p];\n        const v = vs[p];\n        const valid = this.isValid(u) && this.isValid(v);\n        row[i] = valid ? new Vector(u, v) : null;\n      }\n\n      if (this.isContinuous) {\n        row.push(row[0]);\n      }\n\n      grid[j] = row;\n    }\n    return grid;\n  }\n\n  /**\n   * release data\n   */\n  public release() {\n    this.grid = [];\n  }\n\n  /**\n   * grib data extent\n   * 格点数据范围\n   */\n  public extent() {\n    return [this.xmin, this.ymin, this.xmax, this.ymax];\n  }\n\n  /**\n   * Bilinear interpolation for Vector\n   * 针对向量进行双线性插值\n   * https://en.wikipedia.org/wiki/Bilinear_interpolation\n   * @param   {Number} x\n   * @param   {Number} y\n   * @param   {Number[]} g00\n   * @param   {Number[]} g10\n   * @param   {Number[]} g01\n   * @param   {Number[]} g11\n   * @returns {Vector}\n   */\n  private bilinearInterpolateVector(\n    x: number,\n    y: number,\n    g00: { u: number; v: number },\n    g10: { u: number; v: number },\n    g01: { u: number; v: number },\n    g11: { u: number; v: number },\n  ) {\n    const rx = 1 - x;\n    const ry = 1 - y;\n\n    const a = rx * ry;\n    const b = x * ry;\n    const c = rx * y;\n    const d = x * y;\n    const u = g00.u * a + g10.u * b + g01.u * c + g11.u * d;\n    const v = g00.v * a + g10.v * b + g01.v * c + g11.v * d;\n    return new Vector(u, v);\n  }\n\n  /**\n   * calculate vector value range\n   */\n  calculateRange() {\n    if (!this.grid || !this.grid[0]) return;\n    const rows = this.grid.length as number;\n    const cols = this.grid[0].length as number;\n\n    // const vectors = [];\n    let min;\n    let max;\n    // @from: https://stackoverflow.com/questions/13544476/how-to-find-max-and-min-in-array-using-minimum-comparisons\n    for (let j = 0; j < rows; j++) {\n      for (let i = 0; i < cols; i++) {\n        const vec = this.grid[j][i];\n\n        if (vec !== null) {\n          const val = vec.m || vec.magnitude();\n          // vectors.push();\n          if (min === undefined) {\n            min = val;\n          } else if (max === undefined) {\n            max = val;\n            // update min max\n            // 1. Pick 2 elements(a, b), compare them. (say a > b)\n            min = Math.min(min, max);\n            max = Math.max(min, max);\n          } else {\n            // 2. Update min by comparing (min, b)\n            // 3. Update max by comparing (max, a)\n            min = Math.min(val, min);\n            max = Math.max(val, max);\n          }\n        }\n      }\n    }\n    return [min, max];\n  }\n\n  /**\n   * 检查 uv是否合法\n   * @param x\n   * @private\n   */\n  public isValid(x: any) {\n    return x !== null && x !== undefined;\n  }\n\n  private getWrappedLongitudes() {\n    let xmin = this.xmin;\n    let xmax = this.xmax;\n\n    if (this.translateX) {\n      if (this.isContinuous) {\n        xmin = -180;\n        xmax = 180;\n      } else {\n        // not sure about this (just one particular case, but others...?)\n        xmax = this.xmax - 360;\n        xmin = this.xmin - 360;\n      }\n    }\n    return [xmin, xmax];\n  }\n\n  public contains(lon: number, lat: number) {\n    const [xmin, xmax] = this.getWrappedLongitudes();\n\n    if (xmax > 180 && lon >= -180 && lon <= xmax - 360) {\n      lon += 360;\n    } else if (xmin < -180 && lon <= 180 && lon >= xmin + 360) {\n      lon -= 360;\n    }\n\n    const longitudeIn = lon >= xmin && lon <= xmax;\n    let latitudeIn;\n    if (this.deltaY >= 0) {\n      latitudeIn = lat >= this.ymin && lat <= this.ymax;\n    } else {\n      latitudeIn = lat >= this.ymax && lat <= this.ymin;\n    }\n    return longitudeIn && latitudeIn;\n  }\n\n  /**\n   * 获取经纬度所在的位置索引\n   * @param lon\n   * @param lat\n   */\n  public getDecimalIndexes(lon: number, lat: number) {\n    const i = floorMod(lon - this.xmin, 360) / this.deltaX; // calculate longitude index in wrapped range [0, 360)\n    if (this.flipY) {\n      const j = (this.ymax - lat) / this.deltaY; // calculate latitude index in direction +90 to -90\n      return [i, j];\n    } else {\n      const j = (this.ymin + lat) / this.deltaY; // calculate latitude index in direction +90 to -90\n      return [i, j];\n    }\n  }\n\n  /**\n   * Nearest value at lon-lat coordinates\n   * 线性插值\n   * @param lon\n   * @param lat\n   */\n  public valueAt(lon: number, lat: number) {\n    let flag = false;\n\n    if (this.wrapX) {\n      flag = true;\n    } else if (this.contains(lon, lat)) {\n      flag = true;\n    }\n\n    if (!flag) return null;\n\n    const indexes = this.getDecimalIndexes(lon, lat);\n    const ii = Math.floor(indexes[0]);\n    const jj = Math.floor(indexes[1]);\n\n    const ci = this.clampColumnIndex(ii);\n    const cj = this.clampRowIndex(jj);\n\n    return this.valueAtIndexes(ci, cj);\n  }\n\n  /**\n   * Get interpolated grid value lon-lat coordinates\n   * 双线性插值\n   * @param lon\n   * @param lat\n   */\n  public interpolatedValueAt(lon: number, lat: number) {\n    let flag = false;\n\n    if (this.wrapX) {\n      flag = true;\n    } else if (this.contains(lon, lat)) {\n      flag = true;\n    }\n\n    if (!flag) return null;\n\n    const [i, j] = this.getDecimalIndexes(lon, lat);\n    return this.interpolatePoint(i, j);\n  }\n\n  public hasValueAt(lon: number, lat: number) {\n    const value = this.valueAt(lon, lat);\n    return value !== null;\n  }\n\n  /**\n   * 基于向量的双线性插值\n   * @param i\n   * @param j\n   */\n  private interpolatePoint(i: number, j: number) {\n    //         1      2           After converting λ and φ to fractional grid indexes i and j, we find the\n    //        fi  i   ci          four points 'G' that enclose point (i, j). These points are at the four\n    //         | =1.4 |           corners specified by the floor and ceiling of i and j. For example, given\n    //      ---G--|---G--- fj 8   i = 1.4 and j = 8.3, the four surrounding grid points are (1, 8), (2, 8),\n    //    j ___|_ .   |           (1, 9) and (2, 9).\n    //  =8.3   |      |\n    //      ---G------G--- cj 9   Note that for wrapped grids, the first column is duplicated as the last\n    //         |      |           column, so the index ci can be used without taking a modulo.\n    const indexes = this.getFourSurroundingIndexes(i, j);\n    const [fi, ci, fj, cj] = indexes;\n    const values = this.getFourSurroundingValues(fi, ci, fj, cj);\n    if (values) {\n      const [g00, g10, g01, g11] = values;\n      // @ts-ignore\n      return this.bilinearInterpolateVector(i - fi, j - fj, g00, g10, g01, g11);\n    }\n\n    return null;\n  }\n\n  /**\n   * Check the column index is inside the field,\n   * adjusting to min or max when needed\n   * @private\n   * @param   {Number} ii - index\n   * @returns {Number} i - inside the allowed indexes\n   */\n  private clampColumnIndex(ii: number) {\n    let i = ii;\n    if (ii < 0) {\n      i = 0;\n    }\n    const maxCol = this.cols - 1;\n    if (ii > maxCol) {\n      i = maxCol;\n    }\n    return i;\n  }\n\n  /**\n   * Check the row index is inside the field,\n   * adjusting to min or max when needed\n   * @private\n   * @param   {Number} jj index\n   * @returns {Number} j - inside the allowed indexes\n   */\n  private clampRowIndex(jj: number) {\n    let j = jj;\n    if (jj < 0) {\n      j = 0;\n    }\n    const maxRow = this.rows - 1;\n    if (jj > maxRow) {\n      j = maxRow;\n    }\n    return j;\n  }\n\n  /**\n   * 计算索引位置周围的数据\n   * @private\n   * @param   {Number} i - decimal index\n   * @param   {Number} j - decimal index\n   * @returns {Array} [fi, ci, fj, cj]\n   */\n  private getFourSurroundingIndexes(i: number, j: number) {\n    const fi = Math.floor(i); // 左\n    let ci = fi + 1; // 右\n    // duplicate colum to simplify interpolation logic (wrapped value)\n    if (this.isContinuous && ci >= this.cols) {\n      ci = 0;\n    }\n    ci = this.clampColumnIndex(ci);\n\n    const fj = this.clampRowIndex(Math.floor(j)); // 上 纬度方向索引（取整）\n    const cj = this.clampRowIndex(fj + 1); // 下\n\n    return [fi, ci, fj, cj];\n  }\n\n  /**\n   * Get four surrounding values or null if not available,\n   * from 4 integer indexes\n   * @private\n   * @param   {Number} fi\n   * @param   {Number} ci\n   * @param   {Number} fj\n   * @param   {Number} cj\n   * @returns {Array}\n   */\n  private getFourSurroundingValues(fi: number, ci: number, fj: number, cj: number) {\n    let row;\n    if ((row = this.grid[fj])) {\n      const g00 = row[fi]; // << left\n      const g10 = row[ci]; // right >>\n      if (this.isValid(g00) && this.isValid(g10) && (row = this.grid[cj])) {\n        // lower row vv\n        const g01 = row[fi]; // << left\n        const g11 = row[ci]; // right >>\n        if (this.isValid(g01) && this.isValid(g11)) {\n          return [g00, g10, g01, g11]; // 4 values found!\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Value for grid indexes\n   * @param   {Number} i - column index (integer)\n   * @param   {Number} j - row index (integer)\n   * @returns {Vector|Number}\n   */\n  public valueAtIndexes(i: number, j: number) {\n    return this.grid[j][i]; // <-- j,i !!\n  }\n\n  /**\n   * Lon-Lat for grid indexes\n   * @param   {Number} i - column index (integer)\n   * @param   {Number} j - row index (integer)\n   * @returns {Number[]} [lon, lat]\n   */\n  public lonLatAtIndexes(i: number, j: number) {\n    const lon = this.longitudeAtX(i);\n    const lat = this.latitudeAtY(j);\n\n    return [lon, lat];\n  }\n\n  /**\n   * Longitude for grid-index\n   * @param   {Number} i - column index (integer)\n   * @returns {Number} longitude at the center of the cell\n   */\n  private longitudeAtX(i: number) {\n    const halfXPixel = this.deltaX / 2.0;\n    let lon = this.xmin + halfXPixel + i * this.deltaX;\n    if (this.translateX) {\n      lon = lon > 180 ? lon - 360 : lon;\n    }\n    return lon;\n  }\n\n  /**\n   * Latitude for grid-index\n   * @param   {Number} j - row index (integer)\n   * @returns {Number} latitude at the center of the cell\n   */\n  private latitudeAtY(j: number) {\n    const halfYPixel = this.deltaY / 2.0;\n    return this.ymax - halfYPixel - j * this.deltaY;\n  }\n\n  /**\n   * 生成粒子位置\n   * @param o\n   * @param width\n   * @param height\n   * @param unproject\n   * @return IPosition\n   */\n  public randomize(\n    o: IPosition = {},\n    width: number,\n    height: number,\n    unproject: (a: number[]) => [number, number] | null,\n  ) {\n    const i = (Math.random() * (width || this.cols)) | 0;\n    const j = (Math.random() * (height || this.rows)) | 0;\n\n    const coords = unproject([i, j]);\n    if (coords !== null) {\n      o.x = coords[0];\n      o.y = coords[1];\n    } else {\n      o.x = this.longitudeAtX(i);\n      o.y = this.latitudeAtY(j);\n    }\n\n    return o;\n  }\n\n  /**\n   * 判断是否是 `Field` 的实例\n   * @return boolean\n   */\n  public checkFields() {\n    return this.isFields;\n  }\n}\n","import Field from './Field';\nimport type { IField } from './Field';\nimport Vector from './Vector';\nimport { isFunction, isNumber, isString, isValide } from './utils';\n\nexport const defaultOptions = {\n  globalAlpha: 0.9, // 全局透明度\n  lineWidth: 1, // 线条宽度\n  colorScale: '#fff',\n  velocityScale: 1 / 25,\n  // particleAge: 90,\n  maxAge: 90, // alias for particleAge\n  // particleMultiplier: 1 / 300, // TODO: PATHS = Math.round(width * height * particleMultiplier);\n  paths: 800,\n  frameRate: 20,\n  useCoordsDraw: true,\n};\n\ntype emptyFunc = (v?: any) => number;\n\nexport interface IOptions {\n  /**\n   * 全局透明度，主要影响粒子拖尾效果，默认 0.9\n   */\n  globalAlpha: number; // 全局透明度\n\n  /**\n   * 线条宽度\n   */\n  lineWidth: number | emptyFunc;\n\n  /**\n   * 粒子颜色配置, 默认#fff，当为回调函数时，参数 function(m:对应点风速值) => string\n   */\n  colorScale: string | string[] | emptyFunc;\n\n  /**\n   * 对于粒子路径步长的乘积系数，默认 1 / 25\n   */\n  velocityScale: number | emptyFunc;\n\n  /**\n   * 粒子路径能够生成的最大帧数，默认是 90\n   */\n  particleAge?: number; // 粒子在重新生成之前绘制的最大帧数\n\n  /**\n   * 粒子路径能够生成的最大帧数，默认是 90；他代表的是我们的 `paths` 数量的粒子的消亡控制，最小值是 0，最大值是 `maxAge`，在运行到 age 数时会消失然后进行重启\n   */\n  maxAge: number; // alias for particleAge\n\n  /**\n   * 粒子路径数量的系数，不推荐使用（视野宽度 * 高度 * 系数）\n   */\n  particleMultiplier?: number; // TODO: PATHS = Math.round(width * height * that.particleMultiplier);\n\n  /**\n   * 生成的粒子数量\n   */\n  paths: number | emptyFunc;\n\n  /**\n   * 用户自定义的帧率，默认是 20ms, 大概接近 50fps 帧，我们可能在某些场景需要降低帧率一保证渲染稳定性；注意此配置还会影响粒子运动的速度\n   */\n  frameRate: number;\n\n  /**\n   * 用户配置的风速最小值，如果未配置会从传入的数据中计算\n   */\n  minVelocity?: number;\n\n  /**\n   * 用户配置的风速最大值，如果未配置会从传入的数据中计算\n   */\n  maxVelocity?: number;\n\n  /**\n   * 使用外部传入的坐标系统，默认是 `true`；某些场景下我们可能直接使用像素坐标。\n   */\n  useCoordsDraw?: boolean;\n}\n\nfunction indexFor(m: number, min: number, max: number, colorScale: string[]) {\n  // map velocity speed to a style\n  return Math.max(0, Math.min(colorScale.length - 1, Math.round(((m - min) / (max - min)) * (colorScale.length - 1))));\n}\n\nclass WindCore {\n  public static Field = Field;\n\n  public forceStop: boolean;\n  private ctx: CanvasRenderingContext2D;\n  private options: IOptions;\n  private field: Field;\n  private particles: any[] = [];\n  private animationLoop: number;\n  private then: number;\n  private generated = false;\n\n  private starting: boolean;\n\n  constructor(ctx: CanvasRenderingContext2D, options: Partial<IOptions>, field?: Field) {\n    this.ctx = ctx;\n\n    if (!this.ctx) {\n      throw new Error('ctx error');\n    }\n\n    this.animate = this.animate.bind(this);\n\n    this.setOptions(options);\n\n    if (field) {\n      this.updateData(field);\n    }\n  }\n\n  /**\n   * 设置配置项\n   * @param options\n   */\n  public setOptions(options: Partial<IOptions>) {\n    this.options = { ...defaultOptions, ...options };\n\n    const { width, height } = this.ctx.canvas;\n\n    if ('particleAge' in options && !('maxAge' in options) && isNumber(this.options.particleAge)) {\n      // @ts-ignore\n      this.options.maxAge = this.options.particleAge;\n    }\n\n    if ('particleMultiplier' in options && !('paths' in options) && isNumber(this.options.particleMultiplier)) {\n      this.options.paths = Math.round(width * height * (this.options.particleMultiplier as number));\n    }\n\n    this.prerender();\n  }\n\n  /**\n   * 获取配置项\n   */\n  public getOptions() {\n    return this.options;\n  }\n\n  /**\n   * 更新数据\n   * @param field\n   */\n  public updateData(field: Field) {\n    this.field = field;\n    if (!this.generated) {\n      return;\n    }\n    this.particles = this.prepareParticlePaths();\n  }\n\n  // @ts-ignore\n  public project(...args: any[]): [number, number] | null {\n    throw new Error('project must be overriden');\n  }\n\n  // @ts-ignore\n  public unproject(...args: any[]): [number, number] | null {\n    throw new Error('unproject must be overriden');\n  }\n\n  /**\n   * 判断位置是否在当前视窗内\n   * @param coordinates\n   */\n  public intersectsCoordinate(coordinates: [number, number]): boolean {\n    throw new Error('must be overriden');\n  }\n\n  /**\n   * 清空当前画布\n   */\n  public clearCanvas() {\n    this.stop();\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.forceStop = false;\n  }\n\n  isStop() {\n    return !this.starting;\n  }\n\n  /**\n   * 启动粒子动画\n   */\n  public start() {\n    this.starting = true;\n    this.forceStop = false;\n    this.then = Date.now();\n    this.animate();\n  }\n\n  /**\n   * 停止粒子动画\n   */\n  public stop() {\n    cancelAnimationFrame(this.animationLoop);\n    this.starting = false;\n    this.forceStop = true;\n  }\n\n  public animate() {\n    if (this.animationLoop) {\n      cancelAnimationFrame(this.animationLoop);\n    }\n    this.animationLoop = requestAnimationFrame(this.animate);\n    const now = Date.now();\n    const delta = now - this.then;\n    if (delta > this.options.frameRate) {\n      this.then = now - (delta % this.options.frameRate);\n      this.render();\n    }\n  }\n\n  /**\n   * 渲染前处理\n   */\n  public prerender() {\n    this.generated = false;\n    if (!this.field) {\n      return;\n    }\n    this.particles = this.prepareParticlePaths();\n    this.generated = true;\n\n    if (!this.starting && !this.forceStop) {\n      this.starting = true;\n      this.then = Date.now();\n      this.animate();\n    }\n  }\n\n  /**\n   * 开始渲染\n   */\n  public render() {\n    this.moveParticles();\n    this.drawParticles();\n    this.postrender();\n  }\n\n  /**\n   * each frame render end\n   */\n  public postrender() {\n    //\n  }\n\n  private moveParticles() {\n    const { width, height } = this.ctx.canvas;\n    const particles = this.particles;\n    // 清空组\n    const maxAge = this.options.maxAge;\n    const velocityScale = isFunction(this.options.velocityScale)\n      ? this.options.velocityScale()\n      : this.options.velocityScale;\n\n    let i = 0;\n    const len = particles.length;\n    for (; i < len; i++) {\n      const particle = particles[i];\n\n      if (particle.age > maxAge) {\n        particle.age = 0;\n        // restart, on a random x,y\n        this.field.randomize(particle, width, height, this.unproject);\n      }\n\n      const x = particle.x;\n      const y = particle.y;\n\n      const vector = this.field.interpolatedValueAt(x, y);\n\n      if (vector === null) {\n        particle.age = maxAge;\n      } else {\n        const xt = x + vector.u * velocityScale;\n        const yt = y + vector.v * velocityScale;\n\n        if (this.field.hasValueAt(xt, yt)) {\n          // Path from (x,y) to (xt,yt) is visible, so add this particle to the appropriate draw bucket.\n          particle.xt = xt;\n          particle.yt = yt;\n          particle.m = vector.m;\n        } else {\n          // Particle isn't visible, but it still moves through the field.\n          particle.x = xt;\n          particle.y = yt;\n          particle.age = maxAge;\n        }\n      }\n\n      particle.age++;\n    }\n  }\n\n  private fadeIn() {\n    const prev = this.ctx.globalCompositeOperation; // lighter\n    this.ctx.globalCompositeOperation = 'destination-in';\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.globalCompositeOperation = prev;\n  }\n\n  private drawParticles() {\n    const particles = this.particles;\n    this.fadeIn();\n    this.ctx.globalAlpha = this.options.globalAlpha;\n\n    this.ctx.fillStyle = `rgba(0, 0, 0, ${this.options.globalAlpha})`;\n    this.ctx.lineWidth = (isNumber(this.options.lineWidth) ? this.options.lineWidth : 1) as number;\n    this.ctx.strokeStyle = (isString(this.options.colorScale) ? this.options.colorScale : '#fff') as string;\n\n    let i = 0;\n    const len = particles.length;\n    if (this.field && len > 0) {\n      let min: number;\n      let max: number;\n      // 如果配置了风速范围\n      if (isValide(this.options.minVelocity) && isValide(this.options.maxVelocity)) {\n        min = this.options.minVelocity as number;\n        max = this.options.maxVelocity as number;\n      } else {\n        // 未配置风速范围取格点数据中的最大风速和最小风速\n        [min, max] = this.field.range as [number, number];\n      }\n      for (; i < len; i++) {\n        this[this.options.useCoordsDraw ? 'drawCoordsParticle' : 'drawPixelParticle'](particles[i], min, max);\n      }\n    }\n  }\n\n  /**\n   * 用于绘制像素粒子\n   * @param particle\n   * @param min\n   * @param max\n   */\n  private drawPixelParticle(particle: any, min: number, max: number) {\n    // TODO 需要判断粒子是否超出视野\n    // this.ctx.strokeStyle = color;\n    const pointPrev: [number, number] = [particle.x, particle.y];\n    // when xt isn't exit\n    const pointNext: [number, number] = [particle.xt, particle.yt];\n\n    if (\n      pointNext &&\n      pointPrev &&\n      isValide(pointNext[0]) &&\n      isValide(pointNext[1]) &&\n      isValide(pointPrev[0]) &&\n      isValide(pointPrev[1]) &&\n      particle.age <= this.options.maxAge\n    ) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(pointPrev[0], pointPrev[1]);\n      this.ctx.lineTo(pointNext[0], pointNext[1]);\n\n      if (isFunction(this.options.colorScale)) {\n        // @ts-ignore\n        this.ctx.strokeStyle = this.options.colorScale(particle.m) as string;\n      } else if (Array.isArray(this.options.colorScale)) {\n        const colorIdx = indexFor(particle.m, min, max, this.options.colorScale);\n        this.ctx.strokeStyle = this.options.colorScale[colorIdx];\n      }\n\n      if (isFunction(this.options.lineWidth)) {\n        // @ts-ignore\n        this.ctx.lineWidth = this.options.lineWidth(particle.m) as number;\n      }\n\n      particle.x = particle.xt;\n      particle.y = particle.yt;\n\n      this.ctx.stroke();\n    }\n  }\n\n  /**\n   * 用于绘制坐标粒子\n   * @param particle\n   * @param min\n   * @param max\n   */\n  private drawCoordsParticle(particle: any, min: number, max: number) {\n    // TODO 需要判断粒子是否超出视野\n    // this.ctx.strokeStyle = color;\n    const source: [number, number] = [particle.x, particle.y];\n    // when xt isn't exit\n    const target: [number, number] = [particle.xt, particle.yt];\n\n    if (\n      target &&\n      source &&\n      isValide(target[0]) &&\n      isValide(target[1]) &&\n      isValide(source[0]) &&\n      isValide(source[1]) &&\n      this.intersectsCoordinate(target) &&\n      particle.age <= this.options.maxAge\n    ) {\n      const pointPrev = this.project(source);\n      const pointNext = this.project(target);\n\n      if (pointPrev && pointNext) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(pointPrev[0], pointPrev[1]);\n        this.ctx.lineTo(pointNext[0], pointNext[1]);\n        particle.x = particle.xt;\n        particle.y = particle.yt;\n\n        if (isFunction(this.options.colorScale)) {\n          // @ts-ignore\n          this.ctx.strokeStyle = this.options.colorScale(particle.m) as string;\n        } else if (Array.isArray(this.options.colorScale)) {\n          const colorIdx = indexFor(particle.m, min, max, this.options.colorScale);\n          this.ctx.strokeStyle = this.options.colorScale[colorIdx];\n        }\n\n        if (isFunction(this.options.lineWidth)) {\n          // @ts-ignore\n          this.ctx.lineWidth = this.options.lineWidth(particle.m) as number;\n        }\n\n        this.ctx.stroke();\n      }\n    }\n  }\n\n  private prepareParticlePaths() {\n    // 由用户自行处理，不再自动修改粒子数\n    const { width, height } = this.ctx.canvas;\n    const particleCount = typeof this.options.paths === 'function' ? this.options.paths(this) : this.options.paths;\n    const particles: any[] = [];\n    if (!this.field) {\n      return [];\n    }\n    let i = 0;\n    for (; i < particleCount; i++) {\n      particles.push(\n        this.field.randomize(\n          {\n            age: this.randomize(),\n          },\n          width,\n          height,\n          this.unproject,\n        ),\n      );\n    }\n    return particles;\n  }\n\n  private randomize() {\n    return Math.floor(Math.random() * this.options.maxAge);\n  }\n}\n\nexport * from './utils';\n\nexport { WindCore, Field, Vector, IField };\n"],"names":[],"mappings":"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"}